{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","data","setData","loading","setLoading","search","setSearch","input","setInput","useEffect","handleFetch","setTimeout","a","fetch","process","response","json","id","name","main","temp","humidity","wind","speed","pressure","onSubmit","event","preventDefault","type","placeholder","value","onChange","e","target","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2PAoDeA,EA/CH,WACV,MAAwBC,mBAAS,IAAjC,mBAAOC,EAAP,KAAaC,EAAb,KACA,EAA8BF,oBAAS,GAAvC,mBAAOG,EAAP,KAAgBC,EAAhB,KACA,EAA4BJ,mBAAS,WAArC,mBAAOK,EAAP,KAAeC,EAAf,KACA,EAA0BN,mBAAS,IAAnC,mBAAOO,EAAP,KAAcC,EAAd,KACAC,qBAAU,WACRC,IACAC,YAAW,WACTP,GAAW,KACV,OACF,CAACC,IACJ,IAAMK,EAAW,uCAAG,8BAAAE,EAAA,sEACKC,MAAM,oDAAD,OACsBR,EADtB,qBAdhBS,mCAcgB,kBADV,cACZC,EADY,gBAIDA,EAASC,OAJR,OAIdf,EAJc,OAKpBC,EAAQD,GALY,2CAAH,qDAYf,OAAIE,EAAgB,4CAElB,sBAAKc,GAAG,OAAR,UACE,wCAAWhB,EAAKiB,QAChB,uCAAUjB,EAAKkB,KAAKC,KAApB,cACA,2CAAcnB,EAAKkB,KAAKE,SAAxB,OACA,6CAAgBpB,EAAKqB,KAAKC,SAC1B,2CAActB,EAAKkB,KAAKK,YACxB,uBAAMC,SAbS,SAACC,GACpBA,EAAMC,iBACNrB,EAAUC,GACVC,EAAS,KAUL,UACC,uBACCoB,KAAK,OACLV,KAAK,SACLW,YAAY,kBACZC,MAAOvB,EACPwB,SAAU,SAACC,GAAD,OAAOxB,EAASwB,EAAEC,OAAOH,UAErC,wBAAQF,KAAK,SAAb,2BChCOM,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.a8f682f6.chunk.js","sourcesContent":["import './App.css';\nimport React, { useState, useEffect } from \"react\";\n\nconst API_KEY = process.env.REACT_APP_API_KEY;\n\nconst App = () => {\n  const [data, setData] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [search, setSearch] = useState(\"Chester\");\n  const [input, setInput] = useState(\"\");\n  useEffect(() => {\n    handleFetch();\n    setTimeout(() => {\n      setLoading(false);\n    }, 1000);\n  }, [search]);\n  const handleFetch = async () => {\n    const response = await fetch(\n  `http://api.openweathermap.org/data/2.5/weather?q=${search},GB&appid=${API_KEY}&units=metric`\n  );\n  const data = await response.json();\n  setData(data);\n  };\n  const handleSubmit = (event) => {\n    event.preventDefault();\n    setSearch(input);\n    setInput(\"\");\n  };\n    if (loading) return <h1>Loading...</h1>;\n    return ( \n      <div id=\"main\">\n        <h2>Name: {data.name}</h2>\n        <p>Temp: {data.main.temp}&#730; C</p>\n        <p>Humidity: {data.main.humidity}%</p>\n        <p>Wind Speed: {data.wind.speed}</p>\n        <p>Pressure: {data.main.pressure}</p>\n        <form onSubmit={handleSubmit}>\n         <input\n          type=\"text\"\n          name=\"search\"\n          placeholder=\"Enter city name\"\n          value={input}\n          onChange={(e) => setInput(e.target.value)}\n        />\n        <button type=\"submit\">Submit</button>\n      </form>\n      </div>\n  \n    );\n    \n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}